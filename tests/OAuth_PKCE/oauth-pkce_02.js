/**
 * REFERENCE CREDIT:
 * https://gist.github.com/ahmetgeymen/a9dcd656a1527f6c73d9c712ea2d9d7e#file-index-html
 * https://thewoods.blog/base64url/
 */

// Create and store a new PKCE code_verifier (the plaintext random secret)
var code_verifier = generateRandomString(128);
localStorage.setItem("local_code_verifier", code_verifier);

var code_challenge = code_verifier; // MAL only supports plain. Makes my life easier...

console.log("Initial state:", state)

// Create and store current state
var state = generateRandomString(16);
localStorage.setItem("local_current_state", state);

// refreshes state when requested
function getstate() {
    state = generateRandomString(16);
    localStorage.setItem("local_current_state", state);
    console.log("state:",state)
}


// Combine all data for MAL API into one dict.
var config = {
    client_id: "92b69132bb2ffad84cccada01aef0d18",
    redirect_uri: "http://localhost:8080/",
    authorization_endpoint: "https://myanimelist.net/v1/oauth2/authorize",
    token_endpoint: "https://myanimelist.net/v1/oauth2/token"
};


// sanity check, log the code challenge and verifier
console.log("challenge:",code_challenge,"verifier :", code_verifier);


/** 
 * Converts a Uint32Array element into a string of twice the input length.
 *  
 * On the off chance that only 1 digit is generated by getRamdonValues(),
 * we add a 0 to the start of dec, then use .substring(dec.length - 1) to get the last 2 digits.
 * that way, even if only 1 digit was generated, we return "0X" back to the string.
*/
function dec2AlphaNum(dec) {
    return ("0" + dec.toString(36)).substring(dec.toString(36).length - 1);     // dec.toString(36) allows for AZ-az-09 resolution
}


/** 
 * Generate a secure random string using browser getRandomValues() and encoding to base64url
 * Input: x preferred string length. ( Only multiples of 8 will give exact length expected (32,64,96,128) )
 * Output: y # of characters A-Z, a-z, 0-9
*/
function generateRandomString(stringLength) {
    stringLength = Math.floor((stringLength/(8/6))/2);      // convert input length to correct base64 length, always rounds down when necessary
    var array = new Uint32Array(stringLength);              // 128 characters (48*2[due to .substring below] = 96 bytes for generation, input into base64 (6-bit encoding))
    window.crypto.getRandomValues(array);
    return btoa(Array.from(array, dec2AlphaNum).join(''))   // btoa is the base64 to ascii translator, takes a string as input. Array.from() iterates over "array", converting each into a 2 character string, then joins them
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=+$/, '');    // for some reason, it doesn't generate any special characters, may look into, low priority
};


// Build the authorization URL
var url = config.authorization_endpoint 
    + "?response_type=code"
    + "&client_id="+encodeURIComponent(config.client_id)
    + "&code_challenge="+encodeURIComponent(code_challenge)
    + "&state="+encodeURIComponent(state)
    + "&redirect_uri="+encodeURIComponent(config.redirect_uri)
    ;

console.log(url);

function runthedamnthing() {
    console.log("Current state:", localStorage.local_current_state);
    getstate();
    // console.log(generateRandomString(32))
};
